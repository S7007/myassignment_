const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/user');

// Login endpoint
router.post('/login', async (req, res) => {
  const { email, password } = req.body;

  // Check if user exists in the database
  const user = await User.findOne({ email });
  if (!user) {
    return res.status(400).json({ message: 'Invalid email or password' });
  }

  // Check if password is correct
  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) {
    return res.status(400).json({ message: 'Invalid email or password' });
  }

  // Generate JWT token
  const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET);

  res.json({ token });
});

// Create user endpoint
router.post('/users', async (req, res) => {
  const { email, password, name, age, bio } = req.body;

  // Hash password
  const salt = await bcrypt.genSalt(10);
  const hashedPassword = await bcrypt.hash(password, salt);

  // Create user
  const user = new User({
    email,
    password: hashedPassword,
    name,
    age,
    bio,
  });

  try {
    await user.save();
    res.json(user);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// Update user endpoint
router.patch('/users/:id', async (req, res) => {
  const { name, age, bio } = req.body;

  try {
    const user = await User.findById(req.params.id);
    if (name) user.name = name;
    if (age) user.age = age;
    if (bio) user.bio = bio;

    await user.save();
    res.json(user);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// Get all users endpoint
router.get('/users', async (req, res) => {
  try {
    const users = await User.find();
    res.json(users);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

module.exports = router;
